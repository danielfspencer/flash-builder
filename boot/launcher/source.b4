struct s_program
  u16 name_ptr
  u16 size
  u32 addr

const u16 TABLE_START = #ram.0#
const u16 TABLE_ENTRIES = #ram.1#
const u16 DEST_ADDR = #ram.0#

const u16 FLASH_DATA = 8192
const u16 FLASH_ADDR_LOW = 8193
const u16 FLASH_ADDR_HIGH = 8194

global array programs = (s_program)[]
//{write ~table_entries &programs[0]}
//{write [~table] &programs[1]}

global u16 cursor = 0
global u16 old_cursor = 1
const str CURSOR_CHAR = ">"

def list_apps()
  if programs.len() == 0
    sys.print_string("No programs")
    {stop}

  for let u16 i = 0; i < programs.len(); i++
    let s_program selected = programs[i]

    let u16 offset = 4 * i
    {write $offset alu.1}
    {write $programs[0] alu.2}
    {write [alu.+] &offset}
    offset += selected.name_ptr

    let str name
    {write $offset &name}

    sys.print_string(name,1,i)

def load(u32 source, u16 dest, u16 size)
  let u16 end_addr = dest + size
  while dest < end_addr
    {write $source[0] $FLASH_ADDR_HIGH}
    {write $source[1] $FLASH_ADDR_LOW}

    {copy $FLASH_DATA $dest}

    source++
    dest++

def launch()
  let s_program selected = programs[cursor]
  sys.print_u32(selected.addr,1,12,true)
  sys.print_u16(selected.size,1,13,true)

  load(selected.addr, DEST_ADDR, selected.size)
  sys.vram.clear()
  {goto $DEST_ADDR 0}

def update_cursor()
  if cursor != old_cursor
    sys.vram.render_char(32, 0, old_cursor, false)
    sys.print_string(CURSOR_CHAR, 0, cursor)
    old_cursor = cursor

  let u16 code = sys.kbd.get_charcode()

  if code == 31
    let u16 limit = programs.len() - 1
    if cursor < limit
      cursor++
  else if code == 30
    if cursor > 0
      cursor--
  else if code == 10
    launch()

  sys.print_u16(cursor,0,15)

load(4096, TABLE_START, 1024)
// TODO fix inline asm generated by consts
{write ram.1 &programs[0]}
{write [ram.0] &programs[1]}

sys.vram.clear()
list_apps()
while true
  update_cursor()

